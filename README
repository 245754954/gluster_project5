###########################################################################
Package and deploy:
1) deploy.sh

###########################################################################
The project consists of the following modules:
1) hycloud-server
2) hycloud-client
4) hycloud-tools


###########################################################################
## hycloud-server
The server provides REST interfaces for the hycloud-client

## Configuration file
The server will load the configuration file in the following order:
1) If configuration file is given from the command line using "-c <configuraionFile>" option, it will be used first;
2) Try to load "server.properties" in the directory where the client is running
3) Try "./hycloud-server/server.properites", which is relative to the current running directory

## Usages of the server
java -jar hycloud-server.jar [-c <configurationFile>]


###########################################################################
## hycloud-client
The client module consists of two parts:
1) storage part for Integrity verification
2) File Fragmentation Upload to server
3) File Download from server

## Configuration file
The client will load the configuration file in the following order:
1) If configuration file is given from the command line using "-c <configuraionFile>" option, it will be used first;
2) Try to load "client.properties" in the directory where the client is running
3) Try "./hycloud-client/client.properites", which is relative to the current running directory

## Usages of the client
// Integrity verification
1) put
Function:
    upload file to gluster
Usage:
    java -jar hycloud-client.jar put -f <filepath>
e.g.,
    java -jar hycloud-client.jar put -f /home/ftpuser/upload.txt

2) get
Function:
    retrieve file from glusterfs
Usage:
    java -jar hycloud-client.jar get -f <filename> -l <localpath>
e.g.,
    java -jar hycloud-client.jar get -f testfile -l /testdir/testfile_get

3) verify
Function:
    verify whether the blocks in the given list are intact
Usage:
    java -jar hycloud-client.jar verify -f <filename> -b <blocklist> -t <challenge list>
e.g.,
    java -jar hycloud-client.jar verify -f testfile -b 1 2 3 -t challenge1 challenge2 challenge3



###########################################################################
## hycloud-tools
The tools module provides tools for testing

## FileGen
Function:
    generates test file according to the given filename and size
Usage:
    java -jar hycloud-tools.jar -f <filepath> -s <size>
e.g.,
    java -jar hycloud-tools.jar -f /testdir/testfile128MB -s 128MB
    java -jar hycloud-tools.jar -f /testdir/testfile1GB -s 1GB

## destory
java -jar destroy.jar origin -f testfile -b 0